Index: main.tf
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>######################################\r\n# Terraform Aws Cloud infrastructure #\r\n######################################\r\n\r\nprovider \"aws\" {\r\n  region     = \"us-east-2\"\r\n}\r\n# Copy Ami's from other region\r\nresource \"aws_ami_copy\" \"jenkins\" {\r\n  name              = \"${var.resource_alias}-ami\"\r\n  description       = \"Copy of jenkins-ami\"\r\n  source_ami_id     = \"ami-04e2cd5f60a36418a\"\r\n  source_ami_region = \"us-west-1\"\r\n\r\n  tags = {\r\n    Name = \"${var.resource_alias}-jenkins-ec2\"\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_ami_copy\" \"k8s\" {\r\n  name              = \"k8s-ami\"\r\n  description       = \"Copy of k8s-ami\"\r\n  source_ami_id     = \"ami-0f8ede470ea845029\"\r\n  source_ami_region = \"us-west-1\"\r\n\r\n      tags = {\r\n    Name = \"${var.resource_alias}-k8s-ec2\"\r\n  }\r\n}\r\n# Create IAM role\r\nresource \"aws_iam_role\" \"jenkins-project-roles\" {\r\n  name = \"${var.resource_alias}-roles\"\r\n\r\n  assume_role_policy = jsonencode({\r\n    Version = \"2012-10-17\"\r\n    Statement = [\r\n      {\r\n        Effect = \"Allow\"\r\n        Principal = {\r\n          Service = \"ec2.amazonaws.com\"\r\n        }\r\n        Action = \"sts:AssumeRole\"\r\n      }\r\n    ]\r\n  })\r\n\r\n  # Attach policy document to the IAM role\r\n  inline_policy {\r\n    name = \"${var.resource_alias}-policy\"\r\n    policy = jsonencode({\r\n      Version = \"2012-10-17\"\r\n      Statement = [\r\n        {\r\n          Sid = \"VisualEditor0\"\r\n          Effect = \"Allow\"\r\n          Action = [\r\n            \"ec2:*\"\r\n          ]\r\n          Resource = \"*\"\r\n        },\r\n        {\r\n          Sid = \"VisualEditor1\"\r\n          Effect = \"Allow\"\r\n          Action = [\r\n            \"s3:GetObject\",\r\n            \"secretsmanager:GetSecretValue\",\r\n            \"secretsmanager:DescribeSecret\",\r\n            \"seretsmanager:CreateSecret\",\r\n            \"secretsmanager:DeleteSecret\",\r\n            \"ecr:GetAuthorizationToken\",\r\n            \"ecr:*\",\r\n            \"s3:*\",\r\n            \"sqs:*\",\r\n            \"secretsmanager:ListSecrets\",\r\n            \"secretsmanager:UpdateSecret\",\r\n            \"ec2:Describe*\",\r\n            \"ec2:StartInstances\",\r\n            \"ec2:StopInstances\",\r\n            \"ec2:TerminateInstances\",\r\n            \"ecr:BatchCheckLayerAvailability\",\r\n            \"ecr:BatchGetImage\",\r\n            \"ecr:CompleteLayerUpload\",\r\n            \"ecr:Describe*\",\r\n            \"ecr:GetDownloadUrlForLayer\",\r\n            \"ecr:InitiateLayerUpload\",\r\n            \"ecr:List*\",\r\n            \"ecr:PutImage\",\r\n            \"ecr:UploadLayerPart\",\r\n            \"ecr:GetAuthorizationToken\",\r\n            \"ecr:BatchCheckLayerAvailability\",\r\n            \"ecr:GetDownloadUrlForLayer\",\r\n            \"ecr:BatchGetImage\",\r\n            \"ecr:PutImage\",\r\n          ]\r\n          Resource = \"*\"\r\n        }\r\n      ]\r\n    })\r\n  }\r\n}\r\nresource \"aws_iam_instance_profile\" \"terraform-jenkins-profile\" {\r\n  name = \"${var.resource_alias}-profile\"\r\n  role = aws_iam_role.jenkins-project-roles.name\r\n}\r\n# Create Vpc mpdule\r\nmodule \"app_vpc\" {\r\n  source  = \"terraform-aws-modules/vpc/aws\"\r\n  version = \"3.14.0\"\r\n\r\n  name = \"${var.resource_alias}-vpc\"\r\n  cidr = var.vpc_cider\r\n\r\n  azs             = var.azs\r\n  private_subnets = var.vpc_private_subnets\r\n  public_subnets  = var.vpc_public_subnets\r\n\r\n  enable_nat_gateway = true\r\n\r\n  tags = {\r\n    Name        = \"${var.resource_alias}-vpc\"\r\n    Terraform   = true\r\n  }\r\n}\r\n\r\n# Create security group to allow port 22,80,443\r\nresource \"aws_security_group\" \"terraform-securitygp-exr\" {\r\n    name = \"${var.resource_alias}-sg\"\r\n    description = \"${var.resource_alias}-sg\"\r\n    vpc_id = module.app_vpc.vpc_id\r\n\r\n    ingress {\r\n        description = \"http\"      \r\n        from_port = 80\r\n        to_port = 80     \r\n        protocol = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n    ingress {\r\n        description = \"jenkins\"\r\n        from_port = 8080\r\n        to_port = 8080\r\n        protocol = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n    ingress {\r\n        description = \"k8s-dash\"\r\n        from_port = 30001\r\n        to_port = 30001\r\n        protocol = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n    ingress {\r\n        description = \"k8s-api\"\r\n        from_port = 6443\r\n        to_port = 6443\r\n        protocol = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n    ingress {\r\n        description = \"https\"      \r\n        from_port = 443\r\n        to_port = 447     \r\n        protocol = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n    ingress {\r\n        description  = \"Ssh\"      \r\n        from_port = 22\r\n        to_port = 22     \r\n        protocol = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n    egress {\r\n        from_port = 0\r\n        to_port = 0\r\n        protocol = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n      tags = {\r\n        Name = \"terraform-securitygp-exr\"\r\n      }\r\n}\r\n# Create S3 and Sqs resources\r\nresource \"aws_s3_bucket\" \"jenkins-s3pjr-dev\" {\r\n  bucket = \"jenkins-s3pj-dev\"\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"jenkins-s3pjr-prod\" {\r\n  bucket = \"jenkins-s3pj-prod\"\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"jenkins-sqspj-dev\" {\r\n  name = \"jenkins-sqspj-dev\"\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"jenkins-sqspj-prod\" {\r\n  name = \"jenkins-sqspj-prod\"\r\n}\r\n# Create secret managers secrets\r\nresource \"aws_secretsmanager_secret\" \"jenkins_secrets_prod\" {\r\n  name = \"jenkins_secrets_prod\"\r\n  tags = {\r\n    Environment = \"production\"\r\n    Owner       = \"Sharon\"\r\n  }\r\n}\r\n\r\nresource \"aws_secretsmanager_secret_version\" \"jenkins_secrets_prod\" {\r\n  secret_id     = aws_secretsmanager_secret.jenkins_secrets_prod.id\r\n  secret_string = jsonencode({\r\n    telegram_token_secret_name = var.secret_prod_credentials\r\n  })\r\n}\r\n\r\n\r\nresource \"aws_secretsmanager_secret\" \"jenkins_secrets_dev\" {\r\n  name = \"jenkins_secrets_dev\"\r\n  tags = {\r\n    Environment = \"development\"\r\n    Owner       = \"Sharon\"\r\n  }\r\n}\r\n\r\nresource \"aws_secretsmanager_secret_version\" \"jenkins_secrets_dev\" {\r\n  secret_id     = aws_secretsmanager_secret.jenkins_secrets_dev.id\r\n  secret_string = jsonencode({\r\n    telegram_token_secret_name = var.secret_dev_credentials\r\n  })\r\n}\r\n\r\n# Launch the Jenkins server instance with the first private IP\r\nresource \"aws_instance\" \"Jenkins-Server\" {\r\n  ami           = aws_ami_copy.jenkins.id\r\n  instance_type = \"t2.small\"\r\n  key_name      = \"terraform-sharon\"\r\n  subnet_id     = module.app_vpc.public_subnets[0]\r\n  vpc_security_group_ids = [aws_security_group.terraform-securitygp-exr.id]\r\n  iam_instance_profile = aws_iam_instance_profile.terraform-jenkins-profile.name\r\n\r\n  tags = {\r\n    Name = \"${var.resource_alias}-jenkins-ec2\"\r\n  }\r\n}\r\n  # Launch the k8s server instance with the second private IP\r\n  resource \"aws_instance\" \"k8s-Server\" {\r\n    ami           = aws_ami_copy.k8s.id\r\n    instance_type = \"t2.medium\"\r\n    key_name      = \"terraform-sharon\"\r\n    subnet_id     = module.app_vpc.public_subnets[1]\r\n    vpc_security_group_ids = [aws_security_group.terraform-securitygp-exr.id]\r\n    iam_instance_profile = aws_iam_instance_profile.terraform-jenkins-profile.name\r\n    tags = {\r\n      Name = \"${var.resource_alias}-k8s-ec2\"\r\n    }\r\n\r\n  }\r\nresource \"aws_ecr_repository\" \"jenkins_project_cicd\" {\r\n  name = \"jenkins-project-cicd\"\r\n}\r\nresource \"aws_ecr_repository\" \"jenkins-project-dev\" {\r\n  name = \"jenkins-project-dev\"\r\n}\r\nresource \"aws_ecr_repository\" \"jenkins-project-prod\" {\r\n  name = \"jenkins-project-prod\"\r\n}\r\nresource \"aws_ecr_repository\" \"jenkins-project-worker-dev\" {\r\n  name = \"\tjenkins-project-worker-dev\"\r\n}\r\nresource \"aws_ecr_repository\" \"jenkins-project-worker-prod\" {\r\n  name = \"\tjenkins-project-worker-prod\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.tf b/main.tf
--- a/main.tf	
+++ b/main.tf	
@@ -5,29 +5,6 @@
 provider "aws" {
   region     = "us-east-2"
 }
-# Copy Ami's from other region
-resource "aws_ami_copy" "jenkins" {
-  name              = "${var.resource_alias}-ami"
-  description       = "Copy of jenkins-ami"
-  source_ami_id     = "ami-04e2cd5f60a36418a"
-  source_ami_region = "us-west-1"
-
-  tags = {
-    Name = "${var.resource_alias}-jenkins-ec2"
-  }
-}
-
-
-resource "aws_ami_copy" "k8s" {
-  name              = "k8s-ami"
-  description       = "Copy of k8s-ami"
-  source_ami_id     = "ami-0f8ede470ea845029"
-  source_ami_region = "us-west-1"
-
-      tags = {
-    Name = "${var.resource_alias}-k8s-ec2"
-  }
-}
 # Create IAM role
 resource "aws_iam_role" "jenkins-project-roles" {
   name = "${var.resource_alias}-roles"
